/* The following code was generated by JFlex 1.7.0 */

import java.util.*; 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>tst.jflex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\37\1\40\1\40\1\37\23\0\1\52\1\45\1\45\1\0"+
    "\1\52\1\56\1\0\1\45\1\45\1\51\1\46\1\45\1\47\1\45"+
    "\1\50\1\41\11\44\1\60\1\45\1\55\1\53\1\54\1\45\1\0"+
    "\1\33\5\43\21\35\1\42\2\35\1\45\1\0\1\45\1\52\1\31"+
    "\1\0\1\7\1\12\1\20\1\10\1\13\1\4\1\17\1\15\1\1"+
    "\1\35\1\23\1\5\1\24\1\2\1\6\1\25\1\34\1\16\1\14"+
    "\1\3\1\11\1\26\1\22\1\30\1\27\1\32\1\45\1\57\1\45"+
    "\1\45\6\0\1\40\u05da\0\12\36\206\0\12\36\306\0\12\36\u019c\0"+
    "\12\36\166\0\12\36\166\0\12\36\166\0\12\36\166\0\12\36\166\0"+
    "\12\36\166\0\12\36\166\0\12\36\166\0\12\36\166\0\12\36\140\0"+
    "\12\36\166\0\12\36\106\0\12\36\u0116\0\12\36\106\0\12\36\u0746\0"+
    "\12\36\46\0\12\36\u012c\0\12\36\200\0\12\36\246\0\12\36\6\0"+
    "\12\36\266\0\12\36\126\0\12\36\206\0\12\36\6\0\12\36\u03b2\0"+
    "\1\21\33\0\1\40\1\40\u85f6\0\12\36\u02a6\0\12\36\46\0\12\36"+
    "\306\0\12\36\26\0\12\36\126\0\12\36\u0196\0\12\36\u5316\0\12\36"+
    "\u0586\0\12\36\u0bbc\0\12\36\200\0\12\36\74\0\12\36\220\0\12\36"+
    "\u0116\0\12\36\u0156\0\12\36\166\0\12\36\u0176\0\12\36\146\0\12\36"+
    "\146\0\12\36\u01a6\0\12\36\u0366\0\12\36\u4e06\0\12\36\346\0\12\36"+
    "\u6c74\0\62\36\u1150\0\12\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\20\2\1\1\6\2\1\3\1\1\1\3"+
    "\12\4\1\2\1\5\14\2\1\5\4\2\1\5\23\2"+
    "\2\0\11\2\2\0\1\1\1\0\2\2\1\0\45\2"+
    "\2\0\10\2\3\3\1\0\31\2\2\0\25\2\1\5"+
    "\1\0\11\2\1\5\4\2\25\0\4\2\15\0\1\5"+
    "\4\0\1\5\34\0\2\2\56\0\1\2\66\0\1\5"+
    "\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[395];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\61\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u0372\0\u11cd"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u10a7\0\u1acc"+
    "\0\u10d8\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb"+
    "\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243"+
    "\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb"+
    "\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863"+
    "\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73"+
    "\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb"+
    "\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83"+
    "\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b"+
    "\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193"+
    "\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b"+
    "\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3"+
    "\0\u34d4\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b"+
    "\0\u365c\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3"+
    "\0\u37e4\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b"+
    "\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3"+
    "\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b"+
    "\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3"+
    "\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b"+
    "\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3"+
    "\0\u4114\0\u4145\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b"+
    "\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3"+
    "\0\u4424\0\u4455\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b"+
    "\0\u45ac\0\u45dd\0\u460e\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703"+
    "\0\u4734\0\u4765\0\u4796\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b"+
    "\0\u48bc\0\u48ed\0\u491e\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13"+
    "\0\u4a44\0\u4a75\0\u4aa6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[395];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\17\1\25\1\26\1\27\1\17"+
    "\1\30\2\17\1\31\2\17\1\32\1\33\1\0\1\34"+
    "\2\17\1\32\1\35\1\36\1\37\1\40\3\41\1\42"+
    "\1\43\1\44\1\45\1\46\62\0\1\17\1\47\1\17"+
    "\1\50\14\17\1\0\14\17\4\0\2\17\16\0\5\17"+
    "\1\51\1\52\3\17\1\53\5\17\1\0\14\17\4\0"+
    "\2\17\16\0\12\17\1\54\1\17\1\55\1\56\2\17"+
    "\1\0\5\17\1\57\6\17\4\0\2\17\16\0\4\17"+
    "\1\60\1\61\1\62\6\17\1\63\2\17\1\0\14\17"+
    "\4\0\2\17\16\0\5\17\1\64\12\17\1\0\14\17"+
    "\4\0\2\17\16\0\15\17\1\65\2\17\1\0\3\17"+
    "\1\66\10\17\4\0\2\17\16\0\1\17\1\67\6\17"+
    "\1\70\2\17\1\71\4\17\1\0\14\17\4\0\2\17"+
    "\16\0\5\17\1\72\4\17\1\73\5\17\1\0\5\17"+
    "\1\74\6\17\4\0\2\17\16\0\1\17\1\75\11\17"+
    "\1\76\4\17\1\0\14\17\4\0\2\17\16\0\1\77"+
    "\4\17\1\100\7\17\1\101\2\17\1\0\14\17\4\0"+
    "\2\17\16\0\1\17\1\102\2\17\1\103\13\17\1\0"+
    "\6\17\1\104\5\17\4\0\2\17\16\0\1\105\1\17"+
    "\1\106\11\17\1\107\3\17\1\0\1\110\13\17\4\0"+
    "\2\17\16\0\20\17\1\0\14\17\4\0\2\17\16\0"+
    "\12\17\1\111\5\17\1\0\14\17\4\0\2\17\16\0"+
    "\5\17\1\70\12\17\1\0\14\17\4\0\2\17\16\0"+
    "\4\17\1\112\1\113\1\114\5\17\1\115\3\17\1\0"+
    "\14\17\4\0\2\17\20\0\1\116\14\0\1\117\41\0"+
    "\14\17\1\120\2\17\1\121\1\0\14\17\4\0\2\17"+
    "\16\0\10\17\1\122\7\17\1\0\14\17\4\0\2\17"+
    "\16\0\10\17\1\123\4\17\1\124\2\17\1\0\14\17"+
    "\4\0\2\17\16\0\1\125\4\17\1\126\12\17\1\0"+
    "\14\17\4\0\2\17\16\0\5\17\1\127\12\17\1\0"+
    "\14\17\4\0\2\17\16\0\1\17\1\130\16\17\1\0"+
    "\14\17\4\0\2\17\15\0\36\131\1\32\2\0\1\32"+
    "\2\131\1\32\14\131\37\0\1\33\21\0\30\131\1\132"+
    "\5\131\1\32\2\0\1\32\1\132\1\131\1\32\14\131"+
    "\46\0\1\35\4\0\1\35\53\0\2\35\4\0\1\35"+
    "\54\0\1\133\1\134\1\0\1\35\60\0\1\35\60\0"+
    "\1\35\1\41\57\0\1\35\1\0\1\41\56\0\1\35"+
    "\2\0\1\35\55\0\1\35\3\0\1\35\61\0\1\35"+
    "\1\0\2\17\1\50\1\17\1\135\12\17\1\136\1\0"+
    "\14\17\4\0\2\17\16\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\137\1\24\1\17\1\25"+
    "\1\26\1\27\1\17\1\30\2\17\1\31\2\17\4\0"+
    "\2\17\16\0\2\17\1\65\15\17\1\0\14\17\4\0"+
    "\2\17\16\0\20\17\1\0\2\17\1\140\11\17\4\0"+
    "\2\17\16\0\20\17\1\0\1\50\13\17\4\0\2\17"+
    "\16\0\20\17\1\0\2\17\1\141\11\17\4\0\2\17"+
    "\16\0\1\142\14\17\1\143\2\17\1\0\14\17\4\0"+
    "\2\17\16\0\20\17\1\0\5\17\1\50\6\17\4\0"+
    "\2\17\16\0\20\17\1\0\3\17\1\144\10\17\4\0"+
    "\2\17\16\0\5\17\1\145\12\17\1\0\14\17\4\0"+
    "\2\17\16\0\15\17\1\50\2\17\1\0\14\17\4\0"+
    "\2\17\16\0\4\17\1\103\13\17\1\0\14\17\4\0"+
    "\2\17\16\0\1\146\17\17\1\0\14\17\4\0\2\17"+
    "\16\0\1\17\1\147\16\17\1\0\14\17\4\0\2\17"+
    "\16\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\137\1\24\1\17\1\25\1\26\1\27\1\17"+
    "\1\30\1\150\1\17\1\31\2\17\4\0\2\17\16\0"+
    "\12\17\1\151\5\17\1\0\14\17\4\0\2\17\16\0"+
    "\7\17\1\152\10\17\1\0\14\17\4\0\2\17\16\0"+
    "\2\17\1\153\15\17\1\0\14\17\4\0\2\17\16\0"+
    "\20\17\1\0\2\17\1\50\11\17\4\0\2\17\16\0"+
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\154\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\137\1\24\1\17\1\25\1\26\1\27\1\17\1\30"+
    "\2\17\1\31\2\17\4\0\2\17\16\0\3\17\1\155"+
    "\1\156\13\17\1\0\14\17\4\0\2\17\16\0\1\17"+
    "\1\157\16\17\1\0\14\17\4\0\2\17\16\0\1\160"+
    "\12\17\1\161\4\17\1\0\14\17\4\0\2\17\16\0"+
    "\1\64\17\17\1\0\14\17\4\0\2\17\16\0\2\17"+
    "\1\162\15\17\1\0\14\17\4\0\2\17\16\0\5\17"+
    "\1\163\12\17\1\0\14\17\4\0\2\17\16\0\12\17"+
    "\1\164\5\17\1\0\14\17\4\0\2\17\16\0\10\17"+
    "\1\71\7\17\1\0\14\17\4\0\2\17\16\0\13\17"+
    "\1\165\4\17\1\0\14\17\4\0\2\17\16\0\2\17"+
    "\1\166\15\17\1\0\3\17\1\167\10\17\4\0\2\17"+
    "\16\0\16\17\1\170\1\17\1\0\10\17\1\171\3\17"+
    "\4\0\2\17\16\0\6\17\1\172\6\17\1\173\2\17"+
    "\1\0\14\17\4\0\2\17\16\0\5\17\1\174\12\17"+
    "\1\0\14\17\4\0\2\17\16\0\1\175\17\17\1\0"+
    "\14\17\4\0\2\17\16\0\1\176\1\17\1\177\13\17"+
    "\1\200\1\17\1\0\14\17\4\0\2\17\16\0\6\17"+
    "\1\201\11\17\1\0\14\17\4\0\2\17\16\0\1\17"+
    "\1\202\16\17\1\0\2\17\1\203\11\17\4\0\2\17"+
    "\16\0\2\17\1\204\10\17\1\165\4\17\1\0\14\17"+
    "\4\0\2\17\16\0\6\17\1\61\11\17\1\0\14\17"+
    "\4\0\2\17\33\0\1\205\50\0\1\206\53\0\1\207"+
    "\17\17\1\0\14\17\4\0\2\17\16\0\14\17\1\210"+
    "\3\17\1\0\14\17\4\0\2\17\16\0\2\17\1\211"+
    "\15\17\1\0\14\17\4\0\2\17\16\0\11\17\1\212"+
    "\6\17\1\0\14\17\4\0\2\17\16\0\1\213\4\17"+
    "\1\214\12\17\1\0\14\17\4\0\2\17\16\0\15\17"+
    "\1\215\2\17\1\0\14\17\4\0\2\17\16\0\1\130"+
    "\3\17\1\216\13\17\1\0\14\17\4\0\2\17\16\0"+
    "\15\17\1\65\2\17\1\0\14\17\4\0\2\17\16\0"+
    "\7\17\1\50\10\17\1\0\14\17\4\0\2\17\53\0"+
    "\1\217\2\0\1\217\2\0\1\217\20\0\1\220\2\0"+
    "\2\220\1\0\2\220\4\0\1\220\12\0\1\220\2\0"+
    "\1\217\2\0\1\221\1\0\1\220\1\221\14\0\37\133"+
    "\2\0\20\133\51\134\1\222\7\134\1\0\1\223\17\17"+
    "\1\0\14\17\4\0\2\17\16\0\4\17\1\224\13\17"+
    "\1\0\14\17\4\0\2\17\16\0\12\17\1\225\5\17"+
    "\1\0\14\17\4\0\2\17\16\0\20\17\1\0\3\17"+
    "\1\226\10\17\4\0\2\17\16\0\13\17\1\50\4\17"+
    "\1\0\14\17\4\0\2\17\16\0\5\17\1\53\12\17"+
    "\1\0\14\17\4\0\2\17\16\0\12\17\1\227\5\17"+
    "\1\0\14\17\4\0\2\17\16\0\6\17\1\230\11\17"+
    "\1\0\14\17\4\0\2\17\16\0\12\17\1\31\5\17"+
    "\1\0\14\17\4\0\2\17\16\0\16\17\1\50\1\17"+
    "\1\0\14\17\4\0\2\17\16\0\12\17\1\231\5\17"+
    "\1\0\14\17\4\0\2\17\16\0\15\17\1\232\2\17"+
    "\1\0\14\17\4\0\2\17\16\0\20\17\1\0\7\17"+
    "\1\150\4\17\4\0\2\17\16\0\5\17\1\50\12\17"+
    "\1\0\14\17\4\0\2\17\16\0\1\17\1\75\7\17"+
    "\1\207\1\17\1\76\4\17\1\0\14\17\4\0\2\17"+
    "\16\0\6\17\1\233\11\17\1\0\14\17\4\0\2\17"+
    "\16\0\12\17\1\234\5\17\1\0\14\17\4\0\2\17"+
    "\16\0\6\17\1\235\11\17\1\0\14\17\4\0\2\17"+
    "\16\0\5\17\1\236\12\17\1\0\14\17\4\0\2\17"+
    "\16\0\1\237\17\17\1\0\14\17\4\0\2\17\16\0"+
    "\5\17\1\61\1\31\11\17\1\0\14\17\4\0\2\17"+
    "\16\0\4\17\1\50\13\17\1\0\14\17\4\0\2\17"+
    "\16\0\6\17\1\240\11\17\1\0\14\17\4\0\2\17"+
    "\16\0\12\17\1\50\5\17\1\0\14\17\4\0\2\17"+
    "\16\0\12\17\1\241\5\17\1\0\14\17\4\0\2\17"+
    "\16\0\4\17\1\242\1\174\12\17\1\0\14\17\4\0"+
    "\2\17\16\0\1\17\1\243\16\17\1\0\14\17\4\0"+
    "\2\17\16\0\12\17\1\244\5\17\1\0\14\17\4\0"+
    "\2\17\16\0\2\17\1\245\15\17\1\0\14\17\4\0"+
    "\2\17\16\0\10\17\1\246\7\17\1\0\14\17\4\0"+
    "\2\17\16\0\15\17\1\230\2\17\1\0\14\17\4\0"+
    "\2\17\16\0\2\17\1\204\15\17\1\0\14\17\4\0"+
    "\2\17\16\0\1\17\1\247\16\17\1\0\14\17\4\0"+
    "\2\17\16\0\10\17\1\241\7\17\1\0\14\17\4\0"+
    "\2\17\16\0\1\250\17\17\1\0\14\17\4\0\2\17"+
    "\16\0\13\17\1\142\4\17\1\0\14\17\4\0\2\17"+
    "\16\0\2\17\1\251\10\17\1\252\4\17\1\0\14\17"+
    "\4\0\2\17\16\0\20\17\1\0\3\17\1\163\10\17"+
    "\4\0\2\17\16\0\17\17\1\253\1\0\14\17\4\0"+
    "\2\17\26\0\1\254\51\0\1\255\57\0\4\17\1\165"+
    "\13\17\1\0\14\17\4\0\2\17\16\0\6\17\1\256"+
    "\11\17\1\0\14\17\4\0\2\17\16\0\6\17\1\257"+
    "\11\17\1\0\14\17\4\0\2\17\16\0\4\17\1\260"+
    "\13\17\1\0\14\17\4\0\2\17\16\0\20\17\1\0"+
    "\4\17\1\261\7\17\4\0\2\17\16\0\2\17\1\262"+
    "\15\17\1\0\14\17\4\0\2\17\16\0\2\17\1\263"+
    "\15\17\1\0\14\17\4\0\2\17\16\0\6\17\1\264"+
    "\11\17\1\0\14\17\4\0\2\17\21\0\1\220\2\0"+
    "\2\220\1\0\2\220\4\0\1\220\12\0\1\220\5\0"+
    "\1\220\1\0\2\220\14\0\50\134\1\2\1\222\7\134"+
    "\1\0\1\17\1\165\16\17\1\0\14\17\4\0\2\17"+
    "\16\0\10\17\1\265\7\17\1\0\14\17\4\0\2\17"+
    "\16\0\13\17\1\266\4\17\1\0\14\17\4\0\2\17"+
    "\16\0\4\17\1\261\13\17\1\0\14\17\4\0\2\17"+
    "\16\0\1\130\1\267\5\17\1\270\10\17\1\0\14\17"+
    "\4\0\2\17\16\0\2\17\1\50\15\17\1\0\14\17"+
    "\4\0\2\17\16\0\20\17\1\0\12\17\1\50\1\17"+
    "\4\0\2\17\16\0\6\17\1\271\11\17\1\0\14\17"+
    "\4\0\2\17\16\0\10\17\1\272\7\17\1\0\14\17"+
    "\4\0\2\17\16\0\2\17\1\165\15\17\1\0\14\17"+
    "\4\0\2\17\16\0\20\17\1\0\2\17\1\273\11\17"+
    "\4\0\2\17\16\0\1\17\1\50\16\17\1\0\14\17"+
    "\4\0\2\17\16\0\16\17\1\170\1\17\1\0\14\17"+
    "\4\0\2\17\16\0\20\17\1\0\1\17\1\50\12\17"+
    "\4\0\2\17\16\0\15\17\1\236\2\17\1\0\14\17"+
    "\4\0\2\17\16\0\1\274\17\17\1\0\14\17\4\0"+
    "\2\17\16\0\12\17\1\130\5\17\1\0\14\17\4\0"+
    "\2\17\16\0\5\17\1\275\12\17\1\0\14\17\4\0"+
    "\2\17\16\0\1\276\17\17\1\0\14\17\4\0\2\17"+
    "\16\0\17\17\1\230\1\0\14\17\4\0\2\17\16\0"+
    "\2\17\1\277\15\17\1\0\14\17\4\0\2\17\16\0"+
    "\13\17\1\300\4\17\1\0\14\17\4\0\2\17\16\0"+
    "\1\301\17\17\1\0\14\17\4\0\2\17\16\0\2\17"+
    "\1\302\15\17\1\0\14\17\4\0\2\17\16\0\14\17"+
    "\1\50\3\17\1\0\14\17\4\0\2\17\30\0\1\303"+
    "\61\0\1\304\45\0\15\17\1\305\2\17\1\0\14\17"+
    "\4\0\2\17\16\0\11\17\1\207\6\17\1\0\14\17"+
    "\4\0\2\17\16\0\1\306\17\17\1\0\14\17\4\0"+
    "\2\17\16\0\6\17\1\234\11\17\1\0\14\17\4\0"+
    "\2\17\16\0\12\17\1\307\5\17\1\0\14\17\4\0"+
    "\2\17\16\0\10\17\1\310\7\17\1\0\14\17\4\0"+
    "\2\17\16\0\2\17\1\120\15\17\1\0\14\17\4\0"+
    "\2\17\16\0\7\17\1\165\10\17\1\0\14\17\4\0"+
    "\2\17\16\0\20\17\1\0\3\17\1\311\10\17\4\0"+
    "\2\17\16\0\6\17\1\312\11\17\1\0\14\17\4\0"+
    "\2\17\16\0\12\17\1\275\5\17\1\0\14\17\4\0"+
    "\2\17\16\0\2\17\1\313\15\17\1\0\14\17\4\0"+
    "\2\17\16\0\4\17\1\230\13\17\1\0\14\17\4\0"+
    "\2\17\16\0\1\314\17\17\1\0\14\17\4\0\2\17"+
    "\16\0\17\17\1\315\1\0\14\17\4\0\2\17\16\0"+
    "\3\17\1\50\14\17\1\0\14\17\4\0\2\17\16\0"+
    "\17\17\1\316\1\0\14\17\4\0\2\17\16\0\12\17"+
    "\1\317\5\17\1\0\14\17\4\0\2\17\16\0\2\17"+
    "\1\320\15\17\1\0\14\17\4\0\2\17\16\0\1\17"+
    "\1\321\16\17\1\0\14\17\4\0\2\17\16\0\20\17"+
    "\1\0\7\17\1\322\4\17\4\0\2\17\16\0\1\323"+
    "\1\324\1\325\1\326\1\327\1\330\1\331\1\332\1\333"+
    "\1\334\1\335\1\336\1\0\1\337\1\340\1\341\1\137"+
    "\1\342\1\0\1\343\1\344\1\345\1\0\1\346\2\0"+
    "\1\347\30\0\1\303\56\0\20\17\1\0\7\17\1\230"+
    "\4\17\4\0\2\17\16\0\17\17\1\50\1\0\14\17"+
    "\4\0\2\17\16\0\17\17\1\350\1\0\14\17\4\0"+
    "\2\17\16\0\6\17\1\163\11\17\1\0\14\17\4\0"+
    "\2\17\16\0\6\17\1\351\11\17\1\0\14\17\4\0"+
    "\2\17\16\0\20\17\1\0\2\17\1\165\11\17\4\0"+
    "\2\17\16\0\5\17\1\61\12\17\1\0\14\17\4\0"+
    "\2\17\16\0\17\17\1\302\1\0\14\17\4\0\2\17"+
    "\16\0\1\230\17\17\1\0\14\17\4\0\2\17\16\0"+
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\137\1\24\1\17\1\25\1\26\1\27\1\17\1\30"+
    "\1\322\1\17\1\31\2\17\4\0\2\17\16\0\15\17"+
    "\1\352\2\17\1\0\14\17\4\0\2\17\16\0\12\17"+
    "\1\61\5\17\1\0\14\17\4\0\2\17\16\0\10\17"+
    "\1\165\7\17\1\0\14\17\4\0\2\17\16\0\17\17"+
    "\1\353\1\0\14\17\4\0\2\17\17\0\1\354\1\0"+
    "\1\303\62\0\1\355\1\356\3\0\1\357\60\0\1\360"+
    "\1\0\1\361\1\362\10\0\1\363\36\0\1\364\1\365"+
    "\1\366\6\0\1\367\50\0\1\370\70\0\1\371\6\0"+
    "\1\372\35\0\1\373\6\0\1\374\2\0\1\375\52\0"+
    "\1\376\4\0\1\377\13\0\1\u0100\33\0\1\u0101\11\0"+
    "\1\u0102\45\0\1\u0103\4\0\1\u0104\7\0\1\u0105\44\0"+
    "\1\u0106\2\0\1\u0107\22\0\1\u0108\31\0\1\u0109\1\0"+
    "\1\u010a\11\0\1\u010b\4\0\1\u010c\51\0\1\u010d\53\0"+
    "\1\374\57\0\1\u010e\1\u010f\1\u0110\5\0\1\u0111\60\0"+
    "\1\u0112\2\0\1\u0113\51\0\1\u0114\60\0\1\u0115\4\0"+
    "\1\u0116\43\0\1\u0117\4\0\1\u0118\60\0\1\u0119\54\0"+
    "\1\u011a\57\0\2\17\1\243\15\17\1\0\14\17\4\0"+
    "\2\17\16\0\17\17\1\165\1\0\14\17\4\0\2\17"+
    "\16\0\20\17\1\0\3\17\1\u011b\10\17\4\0\2\17"+
    "\16\0\6\17\1\u011c\11\17\1\0\14\17\4\0\2\17"+
    "\20\0\1\303\1\0\1\u011d\12\0\1\u011e\43\0\1\371"+
    "\101\0\1\u011f\56\0\1\303\62\0\1\u0120\35\0\1\u0121"+
    "\14\0\1\u0122\71\0\1\303\56\0\1\u0123\41\0\1\u0124"+
    "\70\0\1\303\47\0\1\u0107\54\0\1\u0125\61\0\1\u0126"+
    "\57\0\1\323\1\324\1\325\1\326\1\327\1\330\1\331"+
    "\1\332\1\333\1\334\1\335\1\336\1\0\1\337\1\340"+
    "\1\341\1\137\1\342\1\0\1\343\1\344\1\345\1\0"+
    "\1\346\1\u0127\1\0\1\347\40\0\1\u0128\55\0\1\u0129"+
    "\53\0\1\u012a\101\0\1\303\35\0\1\323\1\324\1\325"+
    "\1\326\1\327\1\330\1\331\1\332\1\u012b\1\334\1\335"+
    "\1\336\1\0\1\337\1\340\1\341\1\137\1\342\1\0"+
    "\1\343\1\344\1\345\1\0\1\346\2\0\1\347\31\0"+
    "\1\u012c\1\u012d\55\0\1\u012e\57\0\1\u012f\12\0\1\u0130"+
    "\45\0\1\370\62\0\1\u0131\63\0\1\u0132\65\0\1\u0133"+
    "\56\0\1\375\63\0\1\254\47\0\1\u0134\21\0\1\u0135"+
    "\52\0\1\u0136\12\0\1\u0137\35\0\1\u0138\6\0\1\u0139"+
    "\50\0\1\u013a\53\0\1\u013b\60\0\1\u013c\1\0\1\u013d"+
    "\13\0\1\u013e\50\0\1\u013f\53\0\1\u0140\21\0\1\u0141"+
    "\37\0\1\u0142\10\0\1\254\53\0\1\365\52\0\1\u0143"+
    "\74\0\1\u0144\46\0\1\u0145\67\0\1\u0146\47\0\1\u0147"+
    "\4\0\1\u0148\70\0\1\u0149\43\0\1\u011a\3\0\1\u014a"+
    "\71\0\1\371\52\0\1\303\51\0\15\17\1\u014b\2\17"+
    "\1\0\14\17\4\0\2\17\16\0\13\17\1\230\4\17"+
    "\1\0\14\17\4\0\2\17\16\0\1\u014c\64\0\1\u014d"+
    "\66\0\1\u014e\72\0\1\u014f\47\0\1\303\52\0\1\357"+
    "\65\0\1\u0150\54\0\1\304\64\0\1\347\64\0\1\303"+
    "\54\0\1\u0151\63\0\1\u0152\73\0\1\u0127\35\0\1\303"+
    "\54\0\1\u0101\7\0\1\u0143\1\0\1\u0102\53\0\1\u0153"+
    "\64\0\1\u0154\54\0\1\u0155\57\0\1\u0156\53\0\1\u0157"+
    "\65\0\1\365\1\347\56\0\1\303\62\0\1\u0158\64\0"+
    "\1\u0159\52\0\1\u015a\1\u013a\54\0\1\u015b\71\0\1\u015c"+
    "\50\0\1\u015d\66\0\1\u015e\65\0\1\304\45\0\1\u0142"+
    "\57\0\1\u015f\67\0\1\u0159\50\0\1\u0160\73\0\1\u0121"+
    "\47\0\1\u0161\10\0\1\u0162\71\0\1\u0132\53\0\1\u0163"+
    "\45\0\1\254\62\0\1\u0164\60\0\1\u0165\56\0\1\u0166"+
    "\101\0\1\u0167\35\0\1\u0168\60\0\1\u0169\64\0\1\u016a"+
    "\52\0\12\17\1\252\5\17\1\0\14\17\4\0\2\17"+
    "\17\0\1\254\67\0\1\u016b\63\0\1\u016c\51\0\1\u0167"+
    "\54\0\1\u011a\1\u016d\5\0\1\u016e\104\0\1\303\33\0"+
    "\1\u016f\62\0\1\u0170\52\0\1\254\101\0\1\u0171\36\0"+
    "\1\303\75\0\1\u0136\64\0\1\303\53\0\1\u0156\43\0"+
    "\1\u0172\72\0\1\u011a\53\0\1\u0173\53\0\1\u0174\77\0"+
    "\1\304\43\0\1\u0175\71\0\1\u0176\45\0\1\u0177\62\0"+
    "\1\u0178\72\0\1\303\61\0\1\u0179\54\0\1\u0143\47\0"+
    "\1\u017a\66\0\1\u0154\64\0\1\u017b\56\0\1\u017c\52\0"+
    "\1\u0112\65\0\1\254\75\0\1\u017d\42\0\1\u017e\64\0"+
    "\1\u0173\50\0\1\u017f\62\0\1\304\54\0\1\u0180\77\0"+
    "\1\u0181\44\0\1\303\74\0\1\u0182\53\0\1\u0183\50\0"+
    "\1\u0184\57\0\1\205\107\0\1\u0185\60\0\1\304\47\0"+
    "\1\303\60\0\1\u0186\47\0\1\u0132\60\0\1\u0187\75\0"+
    "\1\254\42\0\1\365\72\0\1\u0178\41\0\1\304\60\0"+
    "\1\323\1\324\1\325\1\326\1\327\1\330\1\331\1\332"+
    "\1\333\1\334\1\335\1\336\1\0\1\337\1\340\1\341"+
    "\1\137\1\342\1\0\1\343\1\344\1\345\1\0\1\346"+
    "\1\u0185\1\0\1\347\43\0\1\u0188\55\0\1\365\65\0"+
    "\1\u0189\43\0\1\u015b\75\0\1\254\65\0\1\u018a\42\0"+
    "\1\255\67\0\1\u018b\55\0\1\u0162\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19159];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\32\1\1\11\60\1\2\0\11\1\2\0"+
    "\1\1\1\0\2\1\1\0\45\1\2\0\13\1\1\0"+
    "\31\1\2\0\26\1\1\0\16\1\25\0\4\1\15\0"+
    "\1\1\4\0\1\1\34\0\2\1\56\0\1\1\66\0"+
    "\1\1\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[395];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//############################ [ Java code Starts ] ##########################	

	ArrayList<String> tokenized= new ArrayList<String>();
	
//############################ [ Java code Ends ] ############################	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 400) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Do Nothing*/
            } 
            // fall through
          case 6: break;
          case 2: 
            { tokenized.add( "{" + yytext() + ", identifier } \n" );
            } 
            // fall through
          case 7: break;
          case 3: 
            { tokenized.add( "{" + yytext() + ", number } \n" );
            } 
            // fall through
          case 8: break;
          case 4: 
            { tokenized.add( "{" + yytext() + ", token } \n" );
            } 
            // fall through
          case 9: break;
          case 5: 
            { tokenized.add( "{" + yytext() + ", keyword } \n" );
            } 
            // fall through
          case 10: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
